{"version":3,"sources":["redux/actions.js","api/api.js","redux/constants.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/ErrorBoundary/ErrorBoundary.js","components/MainPage/MainPage.js","App.js","redux/reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","ErrorBoundary","props","state","hasErrored","info","this","setState","children","Component","MainPage","searchField","onRequestRobots","onSearchChange","isPending","useEffect","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7939d1d.chunk.js","sourcesContent":["import { apiCall } from '../api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasErrored: false }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasErrored: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { useEffect } from 'react';\r\n\r\nimport CardList from '../CardList/CardList';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\nimport ErrorBoundry from '../ErrorBoundary/ErrorBoundary';\r\n\r\nimport './MainPage.css';\r\n\r\nconst MainPage = ({ robots, searchField, onRequestRobots, onSearchChange, isPending }) => {\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, [onRequestRobots]);\r\n\r\n  const filterRobots = () => {\r\n    return robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='tc'>\r\n      <h1 className='f1'>RoboFriends</h1>\r\n      <SearchBox searchChange={onSearchChange} />\r\n      {isPending ? <h1>Loading</h1> :\r\n        <ErrorBoundry>\r\n          <CardList robots={filterRobots()} />\r\n        </ErrorBoundry>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from './redux/actions';\r\n\r\n//components\r\nimport MainPage from './components/MainPage/MainPage';\r\n\r\nconst App = (props) => (\r\n  <MainPage {...props} />\r\n);\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './App';\r\nimport { requestRobots, searchRobots } from './redux/reducers'\r\n\r\nimport './index.css';\r\n\r\nconst logger = createLogger()\r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}